# HG changeset patch
# Parent d086ad16ac74f17339f15c773ce2cd984ff37bdc

diff --git a/services/common/rest.js b/services/common/rest.js
--- a/services/common/rest.js
+++ b/services/common/rest.js
@@ -365,20 +365,27 @@ RESTRequest.prototype = {
                     channel.URI.spec);
 
     // Create a response object and fill it with some data.
     let response = this.response = new RESTResponse();
     response.request = this;
     response.body = "";
 
     // Define this here so that we don't have make a new one each time
-    // onDataAvailable() gets called.
-    this._inputStream = Cc["@mozilla.org/scriptableinputstream;1"]
+    // onDataAvailable() gets called. If the Content-Type specified a charset,
+    // make sure we use the correct converter stream, instead of a generic
+    // ScriptableInputStream (onDataAvailable will pick the right one).
+    if (channel.contentCharset) {
+      response.charset = channel.contentCharset;
+      this._converterStream = Cc["@mozilla.org/intl/converter-input-stream;1"]
+                                .createInstance(Ci.nsIConverterInputStream);
+    } else {
+      this._inputStream = Cc["@mozilla.org/scriptableinputstream;1"]
                           .createInstance(Ci.nsIScriptableInputStream);
-
+    }
     this.delayTimeout();
   },
 
   onStopRequest: function onStopRequest(channel, context, statusCode) {
     if (this.timeoutTimer) {
       // Clear the abort timer now that the channel is done.
       this.timeoutTimer.clear();
     }
@@ -430,19 +437,31 @@ RESTRequest.prototype = {
 
     delete this._inputStream;
 
     this.onComplete(null);
     this.onComplete = this.onProgress = null;
   },
 
   onDataAvailable: function onDataAvailable(req, cb, stream, off, count) {
-    this._inputStream.init(stream);
     try {
-      this.response.body += this._inputStream.read(count);
+      if (this._inputStream) {
+        this._inputStream.init(stream);
+        this.response.body += this._inputStream.read(count);
+      } else {
+        let str = {};
+        this._converterStream.init(
+          stream, this.response.charset, 0,
+          this._converterStream.DEFAULT_REPLACEMENT_CHARACTER
+        );
+        let num = this._converterStream.readString(count, str);
+        if (num != 0) {
+          this.response.body += str.value;
+        }
+      }
     } catch (ex) {
       this._log.warn("Exception thrown reading " + count +
                      " bytes from the channel.");
       this._log.debug(CommonUtils.exceptionStr(ex));
       throw ex;
     }
 
     try {
diff --git a/services/common/tests/unit/test_restrequest.js b/services/common/tests/unit/test_restrequest.js
--- a/services/common/tests/unit/test_restrequest.js
+++ b/services/common/tests/unit/test_restrequest.js
@@ -155,16 +155,46 @@ add_test(function test_get() {
   do_check_eq(request.status, request.SENT);
   do_check_eq(request.method, "GET");
   do_check_throws(function () {
     request.get();
   });
 });
 
 /**
+ * Test HTTP GET with UTF-8 content, and custom Content-Type.
+ */
+add_test(function test_get_utf8() {
+  let response = "Hello World or Καλημέρα κόσμε or こんにちは 世界";
+  let contentType = "application/x-web-app-manifest+json; charset=UTF-8";
+
+  let server = httpd_setup({"/resource": function(req, res) {
+    res.setStatusLine(req.httpVersion, 200, "OK");
+    res.setHeader("Content-Type", contentType);
+
+    let converter = Cc["@mozilla.org/intl/converter-output-stream;1"]
+                    .createInstance(Ci.nsIConverterOutputStream);
+    converter.init(res.bodyOutputStream, "UTF-8", 0, 0x0000);
+    converter.writeString(response);
+    converter.close();
+  }});
+
+  let request = new RESTRequest(TEST_RESOURCE_URL);
+  request.get(function(error) {
+    do_check_eq(error, null);
+
+    do_check_eq(request.response.status, 200);
+    do_check_eq(request.response.body, response);
+    do_check_eq(request.response.headers["content-type"], contentType);
+
+    server.stop(run_next_test);
+  });
+});
+
+/**
  * Test HTTP PUT with a simple string argument and default Content-Type.
  */
 add_test(function test_put() {
   let handler = httpd_handler(200, "OK", "Got it!");
   let server = httpd_setup({"/resource": handler});
 
   let request = new RESTRequest(TEST_RESOURCE_URL);
   do_check_eq(request.status, request.NOT_SENT);
