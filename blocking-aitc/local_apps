# HG changeset patch
# Parent 835874f56f36464b9cfbb45081661188d91c2364

diff --git a/dom/apps/src/Webapps.jsm b/dom/apps/src/Webapps.jsm
--- a/dom/apps/src/Webapps.jsm
+++ b/dom/apps/src/Webapps.jsm
@@ -604,17 +604,17 @@ let DOMApplicationRegistry = {
   /** Added to support AITC and classic sync */
   itemExists: function(aId) {
     return !!this.webapps[aId];
   },
 
   getAppById: function(aId) {
     if (!this.webapps[aId])
       return null;
-    
+
     let app = this._cloneAppObject(this.webapps[aId]);
     return app;
   },
 
   getAppByManifestURL: function(aManifestURL) {
     // This could be O(1) if |webapps| was a dictionary indexed on manifestURL
     // which should be the unique app identifier.
     // It's currently O(n).
diff --git a/services/aitc/modules/browserid.js b/services/aitc/modules/browserid.js
--- a/services/aitc/modules/browserid.js
+++ b/services/aitc/modules/browserid.js
@@ -133,16 +133,21 @@ BrowserIDService.prototype = {
   /**
    * Internal implementation methods begin here
    */
 
   // Try to get the user's email(s). If user isn't logged in, this will be empty
   _getEmails: function _getEmails(cb, options, sandbox) {
     let self = this;
 
+    if (!sandbox) {
+      cb(new Error("Sandbox not created"), null);
+      return;
+    }
+
     function callback(res) {
       let emails = {};
       try {
         emails = JSON.parse(res);
       } catch (e) {
         self._log.error("Exception in JSON.parse for _getAssertion: " + e);
       }
       self._gotEmails(emails, sandbox, cb, options);
@@ -377,18 +382,26 @@ BrowserIDService.prototype = {
  *
  * @param cb
  *        (function) Callback to be invoked with a Sandbox, when ready.
  * @param uri
  *        (String) URI to be loaded in the Sandbox.
  */
 function Sandbox(cb, uri) {
   this._uri = uri;
-  this._createFrame();
-  this._createSandbox(cb, uri);
+
+  try {
+    this._createFrame();
+    this._createSandbox(cb, uri);
+  } catch(e) {
+    this._log = Log4Moz.repository.getLogger("Service.AITC.BrowserID.Sandbox");
+    this._log.level = Log4Moz.Level[PREFS.get("log")];
+    this._log.error("Could not create Sandbox " + e);
+    cb(null);
+  }
 }
 Sandbox.prototype = {
   /**
    * Frees the sandbox and releases the iframe created to host it.
    */
   free: function free() {
     delete this.box;
     this._container.removeChild(this._frame);
diff --git a/services/aitc/modules/client.js b/services/aitc/modules/client.js
--- a/services/aitc/modules/client.js
+++ b/services/aitc/modules/client.js
@@ -176,17 +176,17 @@ AitcClient.prototype = {
       cb(new Error("Exception in getApps " + e), null);
       return;
     }
 
     // Return success.
     try {
       cb(null, apps);
       // Don't update lastModified until we know cb succeeded.
-      this._appsLastModified = parseInt(req.response.headers["X-Timestamp"], 10);
+      this._appsLastModified = parseInt(req.response.headers["x-timestamp"], 10);
       this._state.set("lastModified", ""  + this._appsLastModified);
     } catch (e) {
       this._log.error("Exception in getApps callback " + e);
     }
   },
 
   /**
    * Change a given app record to match what the server expects.
diff --git a/services/aitc/modules/main.js b/services/aitc/modules/main.js
--- a/services/aitc/modules/main.js
+++ b/services/aitc/modules/main.js
@@ -23,24 +23,37 @@ function Aitc() {
     "services.aitc.service.log.level"
   )];
   this._log.info("Loading AitC");
 
   this.DASHBOARD_ORIGIN = CommonUtils.makeURI(
     Preferences.get("services.aitc.dashboard.url")
   ).prePath;
 
-  this._manager = new AitcManager(this._init.bind(this));
+  let self = this;
+  this._manager = new AitcManager(function managerDone() {
+    CommonUtils.nextTick(self._init, self);
+  });
 }
 Aitc.prototype = {
   // The goal of the init function is to be ready to activate the AITC
-  // client whenever the user is looking at the dashboard.
-  _init: function init() {
+  // client whenever the user is looking at the dashboard. It also calls
+  // the initialSchedule function on the manager.
+  _init: function _init() {
     let self = this;
 
+    // Do an initial upload.
+    this._manager.initialSchedule(function queueDone(num) {
+      if (num == -1) {
+        self._log.debug("No initial upload was required");
+        return;
+      }
+      self._log.debug(num + " initial apps queued successfully");
+    });
+
     // This is called iff the user is currently looking the dashboard.
     function dashboardLoaded(browser) {
       let win = browser.contentWindow;
       self._log.info("Dashboard was accessed " + win);
 
       // If page is ready to go, fire immediately.
       if (win.document && win.document.readyState == "complete") {
         self._manager.userActive(win);
diff --git a/services/aitc/modules/manager.js b/services/aitc/modules/manager.js
--- a/services/aitc/modules/manager.js
+++ b/services/aitc/modules/manager.js
@@ -49,24 +49,16 @@ function AitcManager(cb) {
   this._pending = new AitcQueue("webapps-pending.json", function _queueDone() {
     // Inform the AitC service that we're good to go!
     self._log.info("AitC manager has finished loading");
     try {
       cb(true);
     } catch (e) {
       self._log.error(new Error("AitC manager callback threw " + e));
     }
-
-    // Schedule them, but only if we can get a silent assertion.
-    self._makeClient(function(err, client) {
-      if (!err && client) {
-        self._client = client;
-        self._processQueue();
-      }
-    }, false);
   });
 }
 AitcManager.prototype = {
   /**
    * State of the user. ACTIVE implies user is looking at the dashboard,
    * PASSIVE means either not at the dashboard or the idle timer started.
    */
   _ACTIVE: 1,
@@ -153,16 +145,81 @@ AitcManager.prototype = {
    * page, a call to userActive MUST be made.
    */
   userIdle: function userIdle() {
     this._state = this._PASSIVE;
     this._dashboardWindow = null;
   },
 
   /**
+   * Initial schedule for the manager. It is the responsibility of the
+   * caller who created this object to call this function if it wants to
+   * do an initial sync (i.e. upload local apps on a device that has never
+   * communicated with AITC before).
+   *
+   * The callback will be invoked with the number of local apps that were
+   * queued to be uploaded, or -1 if this client has already synced and a
+   * local upload is not required.
+   *
+   * Try to schedule PUTs but only if we can get a silent assertion, and if
+   * the queue in non-empty, or we've never done a GET (first run).
+   */
+  initialSchedule: function initialSchedule(cb) {
+    let self = this;
+
+    function startProcessQueue(num) {
+      self._makeClient(function(err, client) {
+        if (!err && client) {
+          self._client = client;
+          self._processQueue();
+          return;
+        }
+      });
+      cb(num);
+    }
+
+    // If we've already done a sync with AITC, it means we've already done
+    // an initial upload. Resume processing the queue, if there are items in it.
+    if (Preferences.get("services.aitc.client.lastModified", "0") != "0") {
+      if (this._pending.length) {
+        startProcessQueue(-1);
+      } else {
+        cb(-1);
+      }
+      return;
+    }
+
+    DOMApplicationRegistry.getAllWithoutManifests(function gotAllApps(apps) {
+      let done = 0;
+      let appids = Object.keys(apps);
+      let total = appids.length;
+      self._log.info("First run, queuing all local apps: " + total + " found");
+
+      function appQueued(err) {
+        if (err) {
+          self._log.error("Error queuing app " + apps[appids[done]].origin);
+        }
+
+        if (done == total) {
+          self._log.info("Finished queuing all initial local apps");
+          startProcessQueue(total);
+          return;
+        }
+
+        let app = apps[appids[done]];
+        let obj = {type: "install", app: app, retries: 0, lastTime: 0};
+
+        done += 1;
+        self._pending.enqueue(obj, appQueued);
+      }
+      appQueued();
+    });
+  },
+
+  /**
    * Poll the AITC server for any changes and process them. It is safe to call
    * this function multiple times. Last caller wins. The function will
    * grab the current user state from _state and act accordingly.
    *
    * Invalid states will cause this function to throw.
    */
   _setPoll: function _setPoll() {
     if (this._state == this._ACTIVE && !this._client) {
@@ -180,17 +237,17 @@ AitcManager.prototype = {
 
     // Check if there are any PUTs pending first.
     if (this._pending.length && !(this._putTimer)) {
       // There are pending PUTs and no timer, so let's process them. GETs will
       // resume after the PUTs finish (see processQueue)
       this._processQueue();
       return;
     }
-    
+
     // Do one GET soon, but only if user is active.
     let getFreq;
     if (this._state == this._ACTIVE) {
       CommonUtils.nextTick(this._checkServer, this);
       getFreq = PREFS.get("manager.getActiveFreq");
     } else {
       getFreq = PREFS.get("manager.getPassiveFreq");
     }
@@ -426,24 +483,24 @@ AitcManager.prototype = {
         return;
       }
 
       // Silent refresh was asked for.
       if (!win) {
         cb(err, null);
         return;
       }
-      
+
       // Prompt user to login.
       self._makeClient(function(err, client) {
         if (err) {
           cb(err, null);
           return;
         }
-      
+
         // makeClient sets an updated token.
         self._client = client;
         cb(null, true);
       }, win);
     }
 
     let options = { audience: DASHBOARD_URL };
     if (this._lastEmail) {
@@ -476,17 +533,17 @@ AitcManager.prototype = {
   // Token recieved from _getToken.
   _gotToken: function _gotToken(err, tok, cb) {
     if (!err) {
       this._log.info("Got token from server: " + JSON.stringify(tok));
       cb(null, tok);
       return;
     }
 
-    let msg = err.name + " in _getToken: " + err.error;
+    let msg = "Error in _getToken: " + err;
     this._log.error(msg);
     cb(msg, null);
   },
 
   // Extract the email address from a BrowserID assertion.
   _extractEmail: function _extractEmail(assertion) {
     // Please look the other way while I do this. Thanks.
     let chain = assertion.split("~");
diff --git a/services/aitc/modules/storage.js b/services/aitc/modules/storage.js
--- a/services/aitc/modules/storage.js
+++ b/services/aitc/modules/storage.js
@@ -278,17 +278,17 @@ AitcStorageImpl.prototype = {
     }
 
     // Apply uninstalls first, we do not need to fetch manifests.
     if (toUninstall.length) {
       this._log.info("Applying uninstalls to registry");
 
       let self = this;
       DOMApplicationRegistry.updateApps(toUninstall, function() {
-        // If there are installs, proceed to apply each on in parallel. 
+        // If there are installs, proceed to apply each one in parallel.
         if (toInstall.length) {
           self._applyInstalls(toInstall, callback);
           return;
         }
         callback();
       });
 
       return;
diff --git a/services/aitc/tests/unit/test_aitc_manager.js b/services/aitc/tests/unit/test_aitc_manager.js
new file mode 100644
--- /dev/null
+++ b/services/aitc/tests/unit/test_aitc_manager.js
@@ -0,0 +1,93 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+Cu.import("resource://gre/modules/Webapps.jsm");
+
+Cu.import("resource://services-aitc/manager.js");
+Cu.import("resource://services-common/utils.js");
+Cu.import("resource://services-common/preferences.js");
+
+let fakeApp1 = {
+  origin: "http://1.example.org",
+  receipts: [],
+  manifestURL: "/manifest.webapp",
+  installOrigin: "http://localhost",
+  installedAt: Date.now(),
+  modifiedAt: Date.now(),
+
+  manifest: {
+    name: "Appasaurus 1",
+    description: "One of the best fake apps ever",
+    launch_path: "/",
+    fullscreen: true,
+    required_features: ["webgl"]
+  }
+};
+
+let fakeApp2 = {
+  origin: "http://2.example.org",
+  receipts: [],
+  manifestURL: "/manifest.webapp",
+  installOrigin: "http://localhost",
+  installedAt: Date.now(),
+  modifiedAt: Date.now(),
+
+  manifest: {
+    name: "Appasaurus 2",
+    description: "The other best fake app ever",
+    launch_path: "/",
+    fullscreen: true,
+    required_features: ["geolocation"]
+  }
+};
+
+function run_test() {
+  initTestLogging();
+  run_next_test();
+}
+
+add_test(function test_manager_localapps() {
+  // Install two fake apps into the DOM registry.
+  DOMApplicationRegistry.confirmInstall({app: fakeApp1});
+  DOMApplicationRegistry.confirmInstall({app: fakeApp2});
+
+  // Create an instance of the manager and check if it put the app in the queue.
+  let manager = new AitcManager(function() {
+    CommonUtils.nextTick(doInitialUpload);
+  });
+
+  function doInitialUpload() {
+    manager.initialSchedule(function(num) {
+      // 2 apps should have been queued.
+      do_check_eq(num, 2);
+      do_check_eq(manager._pending.length, 2);
+
+      let entry = manager._pending.peek();
+      do_check_eq(entry.type, "install");
+      do_check_eq(entry.app.origin, fakeApp1.origin);
+
+      // Reset the queue, so the next test is clean.
+      manager._pending.dequeue(function() {
+        manager._pending.dequeue(run_next_test);
+      });
+    });
+  }
+});
+
+add_test(function test_manager_alreadysynced() {
+  // The manager should ignore any local apps if we've already synced before.
+  DOMApplicationRegistry.confirmInstall({app: fakeApp2});
+  Preferences.set("services.aitc.client.lastModified", "" + Date.now());
+
+  let manager = new AitcManager(function() {
+    CommonUtils.nextTick(doCheck);
+  });
+
+  function doCheck() {
+    manager.initialSchedule(function(num) {
+      do_check_eq(num, -1);
+      do_check_eq(manager._pending.length, 0);
+      run_next_test();
+    });
+  }
+});
diff --git a/services/aitc/tests/unit/xpcshell.ini b/services/aitc/tests/unit/xpcshell.ini
--- a/services/aitc/tests/unit/xpcshell.ini
+++ b/services/aitc/tests/unit/xpcshell.ini
@@ -1,8 +1,9 @@
 [DEFAULT]
 head = ../../../common/tests/unit/head_global.js ../../../common/tests/unit/head_helpers.js ../../../common/tests/unit/head_http.js
 tail =
 
 [test_load_modules.js]
+[test_aitc_client.js]
+[test_aitc_manager.js]
 [test_storage_queue.js]
 [test_storage_registry.js]
-[test_aitc_client.js]
