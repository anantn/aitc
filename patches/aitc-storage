# HG changeset patch
# Parent a551e22a0f80d35825a9074d9306e85811d8a8a0
# User Anant Narayanan <anant@kix.in>
aitc-storage

diff --git a/services/aitc/modules/storage.js b/services/aitc/modules/storage.js
new file mode 100644
--- /dev/null
+++ b/services/aitc/modules/storage.js
@@ -0,0 +1,452 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const EXPORTED_SYMBOLS = ["AitcStorage", "AitcQueue"];
+
+const {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;
+
+Cu.import("resource://gre/modules/NetUtil.jsm");
+Cu.import("resource://gre/modules/Webapps.jsm");
+Cu.import("resource://gre/modules/FileUtils.jsm");
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+
+Cu.import("resource://services-common/log4moz.js");
+Cu.import("resource://services-common/preferences.js");
+Cu.import("resource://services-common/rest.js");
+
+/**
+ * Provides a file-backed queue. Currently used by manager.js as persistent
+ * storage to manage pending installs and uninstalls.
+ *
+ * @param filename     
+ *        (String)    The file backing this queue will be named as this string.
+ *
+ * @param cb          
+ *        (Function)  This function will be called when the queue is ready to
+ *                    use. *DO NOT* call any methods on this object until the
+ *                    callback is invoked, if you do so, none of your operations
+ *                    will be persisted on disk.
+ *
+ */
+function AitcQueue(filename, cb) {
+  if (!cb) {
+    throw new Error("AitcQueue constructor called without callback");
+  }
+
+  this._log = Log4Moz.repository.getLogger("Service.AITC.Storage.Queue");
+  this._log.level = Log4Moz.Level[Preferences.get(
+    "services.aitc.storage.log.level"
+  )];
+
+  this._queue = [];
+  this._writeLock = false;
+  this._file = FileUtils.getFile("ProfD", ["webapps", filename], true);
+
+  this._log.info("AitcQueue instance loading");
+
+  let self = this;
+  if (this._file.exists()) {
+    this._getFile(function _gotFile(data) {
+      if (data) {
+        self._queue = data;
+      }
+      self._log.info("AitcQueue instance created");
+      cb(true);
+    });
+  } else {
+    self._log.info("AitcQueue instance created");
+    cb(true);
+  }
+}
+AitcQueue.prototype = {
+  /**
+   * Add an object to the queue, and data is saved to disk.
+   */
+  enqueue: function enqueue(obj, cb) {
+    this._log.info("Adding to queue " + obj);
+
+    if (!cb) {
+      throw new Error("enqueue called without callback");
+    }
+
+    let self = this;
+    this._queue.push(obj);
+
+    try {
+      this._putFile(this._queue, function _enqueuePutFile(err) {
+        if (err) {
+          // Write unsuccessful, don't add to queue.
+          self._queue.pop();
+          cb(err, false);
+          return;
+        }
+        // Successful write.
+        cb(null, true);
+        return;        
+      });
+    } catch (e) {
+      self._queue.pop();
+      cb(e, false);
+    }    
+  },
+
+  /**
+   * Remove the object at the head of the queue, and data is saved to disk.
+   */
+  dequeue: function dequeue(cb) {
+    this._log.info("Removing head of queue");
+
+    if (!cb) {
+      throw new Error("dequeue called without callback");
+    }
+    if (!this._queue.length) {
+      throw new Error("Queue is empty");
+    }
+
+    let self = this;
+    let obj = this._queue.shift();
+
+    try {
+      this._putFile(this._queue, function _dequeuePutFile(err) {
+        if (!err) {
+          // Successful write.
+          cb(null, true);
+          return;
+        }
+        // Unsuccessful write, put back in queue.
+        self._queue.unshift(obj);
+        cb(err, false);
+      });
+    } catch (e) {
+      self._queue.unshift(obj);
+      cb(e, false);
+    }
+  },
+
+  /**
+   * Return the object at the front of the queue without removing it.
+   */
+  peek: function peek() {
+    this._log.info("Peek called when length " + this._queue.length);
+    if (!this._queue.length) {
+      throw new Error("Queue is empty");
+    }
+    return this._queue[0];
+  },
+
+  /**
+   * Find out the length of the queue.
+   */
+  get length() {
+    return this._queue.length;
+  },
+
+  /**
+   * Get contents of cache file and parse it into an array. Will throw an
+   * exception if there is an error while reading the file.
+   */
+  _getFile: function _getFile(cb) {
+    let channel = NetUtil.newChannel(this._file);
+    channel.contentType = "application/json";
+
+    let self = this;
+    NetUtil.asyncFetch(channel, function _asyncFetched(stream, res) {
+      if (!Components.isSuccessCode(res)) {
+        self._log.error("Could not read from json file " + this._file.path);
+        cb(null);
+        return;
+      }
+
+      let data = [];
+      try {
+        data = JSON.parse(
+          NetUtil.readInputStreamToString(stream, stream.available())
+        );
+        stream.close();
+        cb(data);
+      } catch (e) {
+        self._log.error("Could not parse JSON " + e);
+        cb(null);
+      }
+    });
+  },
+
+  /**
+   * Put an array into the cache file. Will throw an exception if there is
+   * an error while trying to write to the file.
+   */
+  _putFile: function _putFile(value, cb) {
+    if (this._writeLock) {
+      throw new Error("_putFile already in progress");
+    }
+
+    this._writeLock = true;
+    try {
+      let ostream = FileUtils.openSafeFileOutputStream(this._file);
+
+      let converter = Cc["@mozilla.org/intl/scriptableunicodeconverter"].
+                      createInstance(Ci.nsIScriptableUnicodeConverter);
+      converter.charset = "UTF-8";
+      let istream = converter.convertToInputStream(JSON.stringify(value));
+
+      // Asynchronously copy the data to the file.
+      let self = this;
+      this._log.info("Writing queue to disk");
+      NetUtil.asyncCopy(istream, ostream, function _asyncCopied(result) {
+        self._writeLock = false;
+        if (Components.isSuccessCode(result)) {
+          self._log.info("asyncCopy succeeded");
+          cb(null);
+        } else {
+          let msg = new Error("asyncCopy failed with " + result);
+          self._log.info(msg);
+          cb(msg);
+        }
+      });
+    } catch (e) {
+      this._writeLock = false;
+      cb(msg);
+    }
+  },
+};
+
+/**
+ * An interface to DOMApplicationRegistry, used by manager.js to process
+ * remote changes received and apply them to the local registry.
+ */
+function AitcStorageImpl() {
+  this._log = Log4Moz.repository.getLogger("Service.AITC.Storage");
+  this._log.level = Log4Moz.Level[Preferences.get(
+    "services.aitc.storage.log.level"
+  )];
+  this._log.info("Loading AitC storage module");
+}
+AitcStorageImpl.prototype = {
+  /**
+   * Determines what changes are to be made locally, given a list of
+   * remote apps.
+   *
+   * @param remoteApps
+   *        (Array)     An array of app records fetched from the AITC server.
+   *
+   * @param callback
+   *        (function)  A callback to be invoked when processing is finished.
+   */
+  processApps: function processApps(remoteApps, callback) {
+    let self = this;
+    this._log.info("Server check got " + remoteApps.length + " apps");
+
+    // Get the set of local apps, and then pass to _processApps.
+    // _processApps will check for the validity of remoteApps.
+    DOMApplicationRegistry.getAllWithoutManifests(
+      function _processAppsGotLocalApps(localApps) {
+        self._processApps(remoteApps, localApps, callback);
+      }
+    );
+  },
+
+  /**
+   * Take a list of remote and local apps and figured out what changes (if any)
+   * are to be made to the local DOMApplicationRegistry.
+   *
+   * General algorithm:
+   *  1. Put all remote apps in a dictionary of origin->app.
+   *  2. Put all local apps in a dictionary of origin->app.
+   *  3. Mark all local apps as "to be deleted".
+   *  4. Go through each remote app:
+   *    4a. If remote app is not marked as deleted, remove from the "to be
+   *        deleted" set.
+   *    4b. If remote app is marked as deleted, but isn't present locally,
+   *        process the next remote app.
+   *    4c. If remote app is not marked as deleted and isn't present locally,
+   *        add to the "to be installed" set.
+   *  5. For each app either in the "to be installed" or "to be deleted" set,
+   *     apply the changes locally. For apps to be installed, we must also
+   *     fetch the manifest.
+   *
+   */
+  _processApps: function _processApps(remoteApps, lApps, callback) {
+    let toDelete = {};
+    let localApps = {};
+
+    // If remoteApps is empty, do nothing. The correct thing to do is to
+    // delete all local apps, but we'll play it safe for now since we are
+    // marking apps as deleted anyway. In a subsequent version (when the
+    // deleted flag is no longer in use), this check can be removed.
+    if (!Object.keys(remoteApps).length) {
+      this._log.warn("Empty set of remote apps to _processApps, returning");
+      callback();
+      return;
+    }
+
+    // Convert lApps to a dictionary of origin -> app (instead of id -> app).
+    for (let [id, app] in Iterator(lApps)) {
+      app.id = id;
+      toDelete[app.origin] = app;
+      localApps[app.origin] = app;
+    }
+
+    // Iterate over remote apps, and find out what changes we must apply.
+    let toInstall = [];
+    for each (let app in remoteApps) {
+      // Don't delete apps that are both local & remote.
+      let origin = app.origin;
+      if (!app.deleted) {
+        delete toDelete[origin];
+      }
+
+      // A remote app that was deleted, but also isn't present locally is NOP.
+      if (app.deleted && !localApps[origin]) {
+        continue;
+      }
+
+      // If there is a remote app that isn't local or if the remote app was
+      // installed or updated later.
+      let id;
+      if (!localApps[origin]) {
+        id = DOMApplicationRegistry.makeAppId();
+      }
+      if (localApps[origin] &&
+          (localApps[origin].installTime < app.installTime)) {
+        id = localApps[origin].id;
+      }
+      
+      // We should (re)install this app locally
+      if (id) {
+        toInstall.push({id: id, value: app});
+      }
+    }
+
+    // Uninstalls only need the ID & deleted flag.
+    let toUninstall = [];
+    for (let origin in toDelete) {
+      toUninstall.push({id: toDelete[origin].id, deleted: true});
+    }
+
+    // Apply uninstalls first, we do not need to fetch manifests.
+    if (toUninstall.length) {
+      this._log.info("Applying uninstalls to registry");
+
+      let self = this;
+      DOMApplicationRegistry.updateApps(toUninstall, function() {
+        // If there are installs, proceed to apply each on in parallel. 
+        if (toInstall.length) {
+          self._applyInstalls(toInstall, callback);
+          return;
+        }
+        callback();
+      });
+
+      return;
+    }
+
+    // If there were no uninstalls, only apply installs
+    if (toInstall.length) {
+      this._applyInstalls(toInstall, callback);
+      return;
+    }
+
+    this._log.info("There were no changes to be applied, returning");
+    callback();
+    return;
+  },
+
+  /**
+   * Apply a set of installs to the local registry. Fetch each app's manifest
+   * in parallel (don't retry on failure) and insert into registry.
+   */
+  _applyInstalls: function _applyInstalls(toInstall, callback) {
+    let done = 0;
+    let total = toInstall.length;
+    this._log.info("Applying " + total + " installs to registry");
+
+    /**
+     * The purpose of _checkIfDone is to invoke the callback after all the
+     * installs have been applied. They all fire in parallel, and each will
+     * check-in when it is done.
+     */
+    let self = this;
+    function _checkIfDone() {
+      done += 1;
+      self._log.debug(done + "/" + total + " apps processed");
+      if (done == total) {
+        callback();
+      }
+    }
+
+    function _makeManifestCallback(appObj) {
+      return function(err, manifest) {
+        if (err) {
+          self._log.warn("Could not fetch manifest for " + appObj.name);
+          _checkIfDone();
+          return;
+        }
+        appObj.value.manifest = manifest;
+        DOMApplicationRegistry.updateApps([appObj], _checkIfDone);
+      }
+    }
+
+    /**
+     * Now we get a manifest for each record, and add it to the local registry
+     * when we receive it. If a manifest GET times out, we will not add
+     * the app to the registry but count as "success" anyway. The app will
+     * be added on the next GET poll, hopefully the manifest will be
+     * available then.
+     */
+    for each (let app in toInstall) {
+      let url = app.value.manifestURL;
+      if (url[0] == "/") {
+        url = app.value.origin + app.value.manifestURL;
+      }
+      this._getManifest(url, _makeManifestCallback(app));
+    }
+  },
+
+  /**
+   * Fetch a manifest from given URL. No retries are made on failure. We'll
+   * timeout after 20 seconds.
+   */
+  _getManifest: function _getManifest(url, callback) {
+    let req = new RESTRequest(url);
+    req.timeout = 20;
+
+    let self = this;
+    req.get(function(error) {
+      if (error) {
+        callback(error, null);
+        return;
+      }
+      if (!req.response.success) {
+        callback(new Error("Non-200 while fetching manifest"), null);
+        return;
+      }
+
+      let err = null;
+      let manifest = null;
+      try {
+        manifest = JSON.parse(req.response.body);
+        if (!manifest.name) {
+          self._log.warn(
+            "_getManifest got invalid manifest: " + req.response.body
+          );
+          err = new Error("Invalid manifest fetched");
+        }
+      } catch (e) {
+        self._log.warn(
+          "_getManifest got invalid JSON response: " + req.response.body
+        );
+        err = new Error("Invalid manifest fetched");
+      }
+
+      callback(err, manifest);
+    });
+  },
+
+};
+
+XPCOMUtils.defineLazyGetter(this, "AitcStorage", function() {
+  return new AitcStorageImpl();
+});
\ No newline at end of file
diff --git a/services/aitc/services-aitc.js b/services/aitc/services-aitc.js
--- a/services/aitc/services-aitc.js
+++ b/services/aitc/services-aitc.js
@@ -1,1 +1,2 @@
 pref("services.aitc.client.log.level", "Debug");
+pref("services.aitc.storage.log.level", "Debug");
\ No newline at end of file
diff --git a/services/aitc/tests/unit/head_global.js b/services/aitc/tests/unit/head_global.js
deleted file mode 100644
--- a/services/aitc/tests/unit/head_global.js
+++ /dev/null
@@ -1,52 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
- * http://creativecommons.org/publicdomain/zero/1.0/ */
-
-// This has the side-effect of populating Cc, Ci, Cu, Cr. It's best not to
-// ask questions and just accept it.
-do_load_httpd_js();
-const Cm = Components.manager;
-
-let gSyncProfile = do_get_profile();
-
-Cu.import("resource://gre/modules/XPCOMUtils.jsm");
-
-let XULAppInfo = {
-  vendor: "Mozilla",
-  name: "XPCShell",
-  ID: "xpcshell@tests.mozilla.org",
-  version: "1",
-  appBuildID: "20100621",
-  platformVersion: "",
-  platformBuildID: "20100621",
-  inSafeMode: false,
-  logConsoleErrors: true,
-  OS: "XPCShell",
-  XPCOMABI: "noarch-spidermonkey",
-  QueryInterface: XPCOMUtils.generateQI([Ci.nsIXULAppInfo, Ci.nsIXULRuntime]),
-  invalidateCachesOnRestart: function invalidateCachesOnRestart() { }
-};
-
-let XULAppInfoFactory = {
-  createInstance: function (outer, iid) {
-    if (outer != null)
-      throw Cr.NS_ERROR_NO_AGGREGATION;
-    return XULAppInfo.QueryInterface(iid);
-  }
-};
-
-let registrar = Components.manager.QueryInterface(Ci.nsIComponentRegistrar);
-registrar.registerFactory(Components.ID("{fbfae60b-64a4-44ef-a911-08ceb70b9f31}"),
-                          "XULAppInfo", "@mozilla.org/xre/app-info;1",
-                          XULAppInfoFactory);
-
-function addResourceAlias() {
-  Cu.import("resource://gre/modules/Services.jsm");
-  const handler = Services.io.getProtocolHandler("resource")
-                  .QueryInterface(Ci.nsIResProtocolHandler);
-
-  
-  let uri = Services.io.newURI("resource:///modules/services-aitc/",
-                               null, null);
-  handler.setSubstitution("services-aitc", uri);
-}
-addResourceAlias();
\ No newline at end of file
diff --git a/services/aitc/tests/unit/head_helpers.js b/services/aitc/tests/unit/head_helpers.js
new file mode 100644
--- /dev/null
+++ b/services/aitc/tests/unit/head_helpers.js
@@ -0,0 +1,20 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+ 
+function httpd_setup (handlers, port) {
+  let port   = port || 8080;
+  let server = new nsHttpServer();
+  for (let path in handlers) {
+    server.registerPathHandler(path, handlers[path]);
+  }
+  try {
+    server.start(port);
+  } catch (ex) {
+    do_print("==========================================");
+    do_print("Got exception starting HTTP server on port " + port);
+    do_print("Error: " + CommonUtils.exceptionStr(ex));
+    do_print("Is there a process already listening on port " + port + "?");
+    do_print("==========================================");
+    do_throw(ex);
+  }
+}
\ No newline at end of file
diff --git a/services/aitc/tests/unit/test_load_modules.js b/services/aitc/tests/unit/test_load_modules.js
--- a/services/aitc/tests/unit/test_load_modules.js
+++ b/services/aitc/tests/unit/test_load_modules.js
@@ -1,9 +1,10 @@
 const modules = [
-  "client.js"
+  "client.js",
+  "storage.js"
 ];
 
 function run_test() {
   for each (let m in modules) {
     Cu.import("resource://services-aitc/" + m, {});
   }
 }
diff --git a/services/aitc/tests/unit/test_storage_queue.js b/services/aitc/tests/unit/test_storage_queue.js
new file mode 100644
--- /dev/null
+++ b/services/aitc/tests/unit/test_storage_queue.js
@@ -0,0 +1,128 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+Cu.import("resource://services-aitc/storage.js");
+Cu.import("resource://services-common/async.js");
+
+let queue = null;
+
+function run_test() {
+  queue = new AitcQueue("test", run_next_test);
+}
+
+add_test(function test_queue_create() {
+  do_check_eq(queue._queue.length, 0);
+  do_check_eq(queue._writeLock, false);
+
+  try {
+    queue.enqueue("foo");
+  } catch (e) {
+    do_check_eq(e.toString(), "Error: enqueue called without callback");
+  }
+
+  try {
+    queue.dequeue();
+  } catch (e) {
+    do_check_eq(e.toString(), "Error: dequeue called without callback");
+  }
+
+  run_next_test();
+});
+
+add_test(function test_queue_enqueue() {
+  // Add to queue.
+  let testObj = {foo: "bar"};
+  queue.enqueue(testObj, function(err, done) {
+    do_check_eq(err, null);
+    do_check_true(done);
+
+    // Check if peek value is correct.
+    do_check_eq(queue.peek(), testObj);
+    // Peek should be idempotent.
+    do_check_eq(queue.peek(), testObj);
+
+    run_next_test();
+  });
+});
+
+add_test(function test_queue_dequeue() {
+  // Remove an item and see if queue is empty.
+  queue.dequeue(function(err, done) {
+    do_check_eq(err, null);
+    do_check_true(done);
+    do_check_eq(queue.length, 0);
+    try {
+      queue.peek();
+    } catch (e) {
+      do_check_eq(e.toString(), "Error: Queue is empty");
+      run_next_test();
+    }
+  });
+});
+
+add_test(function test_queue_multiaddremove() {
+  // Queues should handle objects, strings and numbers.
+  let items = [{test:"object"}, "teststring", 42];
+
+  // Two random numbers: how many items to queue and how many to remove.
+  let num = Math.floor(Math.random() * 100 + 1);
+  let rem = Math.floor(Math.random() * num + 1);
+
+  // First insert all the items we will remove later.
+  for (let i = 0; i < rem; i++) {
+    let ins = items[Math.round(Math.random() * 2)];
+    let cb = Async.makeSpinningCallback();
+    queue.enqueue(ins, cb);
+    do_check_true(cb.wait());
+  }
+
+  do_check_eq(queue.length, rem);
+
+  // Now insert the items we won't remove.
+  let check = [];
+  for (let i = 0; i < (num - rem); i++) {
+    check.push(items[Math.round(Math.random() * 2)]);
+    let cb = Async.makeSpinningCallback();
+    queue.enqueue(check[check.length - 1], cb);
+    do_check_true(cb.wait());
+  }
+
+  do_check_eq(queue.length, num);
+
+  // Now dequeue rem items.
+  for (let i = 0; i < rem; i++) {
+    let cb = Async.makeSpinningCallback();
+    queue.dequeue(cb);
+    do_check_true(cb.wait());
+  }
+
+  do_check_eq(queue.length, num - rem);
+
+  // Check that the items left are the right ones.
+  do_check_eq(JSON.stringify(queue._queue), JSON.stringify(check));
+
+  // Another instance of the same queue should return correct data.
+  let queue2 = new AitcQueue("test", function(done) {
+    do_check_true(done);
+    do_check_eq(queue2.length, queue.length);
+    do_check_eq(JSON.stringify(queue._queue), JSON.stringify(queue2._queue));
+    run_next_test();
+  });
+});
+
+add_test(function test_queue_writelock() {
+  // Queue should not enqueue or dequeue if lock is enabled.
+  queue._writeLock = true;
+  let len = queue.length;
+
+  queue.enqueue("writeLock test", function(err, done) {
+    do_check_eq(err.toString(), "Error: _putFile already in progress");
+    do_check_eq(queue.length, len);
+
+    queue.dequeue(function(err, done) {
+      do_check_eq(err.toString(), "Error: _putFile already in progress");
+      do_check_eq(queue.length, len);
+      run_next_test();
+    });
+  });
+});
\ No newline at end of file
diff --git a/services/aitc/tests/unit/test_storage_registry.js b/services/aitc/tests/unit/test_storage_registry.js
new file mode 100644
--- /dev/null
+++ b/services/aitc/tests/unit/test_storage_registry.js
@@ -0,0 +1,124 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+Cu.import("resource://gre/modules/Webapps.jsm");
+Cu.import("resource://services-aitc/storage.js");
+
+const START_PORT = 8080;
+const SERVER = "http://localhost";
+
+let fakeApp1 = {
+  origin: SERVER + ":" + START_PORT,
+  receipts: [],
+  manifestURL: "/manifest.webapp",
+  installOrigin: "http://localhost",
+  installedAt: Date.now(),
+  modifiedAt: Date.now()
+};
+
+// Valid manifest for app1
+let manifest1 = {
+  name: "Appasaurus",
+  description: "Best fake app ever",
+  launch_path: "/",
+  fullscreen: true,
+  required_features: ["webgl"]
+};
+
+let fakeApp2 = {
+  origin: SERVER + ":" + (START_PORT + 1),
+  receipts: ["fake.jwt.token"],
+  manifestURL: "/manifest.webapp",
+  installOrigin: "http://localhost",
+  installedAt: Date.now(),
+  modifiedAt: Date.now()
+};
+
+// Invalid manifest for app2
+let manifest2_bad = {
+  not: "a manifest",
+  fullscreen: true
+};
+
+// Valid manifest for app2
+let manifest2_good = {
+  name: "Supercalifragilisticexpialidocious",
+  description: "Did we blow your mind yet?",
+  launch_path: "/"
+};
+
+let fakeApp3 = {
+  origin: SERVER + ":" + (START_PORT + 3), // 8082 is for the good manifest2
+  receipts: [],
+  manifestURL: "/manifest.webapp",
+  installOrigin: "http://localhost",
+  installedAt: Date.now(),
+  modifiedAt: Date.now()
+};
+
+let manifest3 = {
+  name: "Taumatawhakatangihangakoauauotamateapokaiwhenuakitanatahu",
+  description: "Find your way around this beautiful hill",
+  launch_path: "/"
+};
+
+function create_servers() {
+  // Setup servers to server manifests at each port
+  let manifests = [manifest1, manifest2_bad, manifest2_good, manifest3];
+  for (let i = 0; i < manifests.length; i++) {
+    let response = JSON.stringify(manifests[i]);
+    httpd_setup({"/manifest.webapp": function(req, res) {
+      res.setStatusLine(req.httpVersion, 200, "OK");
+      res.setHeader("Content-Type", "application/x-web-app-manifest+json");
+      res.bodyOutputStream.write(response, response.length);
+    }}, START_PORT + i);
+  }
+}
+
+function run_test() {
+  create_servers();
+  run_next_test();
+}
+
+add_test(function test_storage_install() {
+  let apps = [fakeApp1, fakeApp2];
+  AitcStorage.processApps(apps, function() {
+    // Verify that app1 got added to registry
+    let id = DOMApplicationRegistry._appId(fakeApp1.origin);
+    do_check_eq(DOMApplicationRegistry.itemExists(id), true);
+
+    // app2 should be missing because of bad manifest
+    do_check_eq(DOMApplicationRegistry._appId(fakeApp2.origin), null);
+
+    // Now associate fakeApp2 with a good manifest and process again
+    fakeApp2.origin = SERVER + ":8082";
+    AitcStorage.processApps([fakeApp1, fakeApp2], function() {
+      // Both apps must be installed
+      let id1 = DOMApplicationRegistry._appId(fakeApp1.origin);
+      let id2 = DOMApplicationRegistry._appId(fakeApp2.origin);
+      do_check_eq(DOMApplicationRegistry.itemExists(id1), true);
+      do_check_eq(DOMApplicationRegistry.itemExists(id2), true);
+      run_next_test();
+    });
+  });
+});
+
+add_test(function test_storage_uninstall() {
+  // Set app1 as deleted.
+  fakeApp1.deleted = true;
+  AitcStorage.processApps([fakeApp2], function() {
+    // It should be missing.
+    do_check_eq(DOMApplicationRegistry._appId(fakeApp1.origin), null);
+    run_next_test();
+  });
+});
+
+add_test(function test_storage_uninstall_empty() {
+  // Now remove app2 by virtue of it missing in the remote list.
+  AitcStorage.processApps([fakeApp3], function() {
+    let id3 = DOMApplicationRegistry._appId(fakeApp3.origin);
+    do_check_eq(DOMApplicationRegistry.itemExists(id3), true);
+    do_check_eq(DOMApplicationRegistry._appId(fakeApp2.origin), null);
+    run_next_test();
+  });
+});
\ No newline at end of file
diff --git a/services/aitc/tests/unit/xpcshell.ini b/services/aitc/tests/unit/xpcshell.ini
--- a/services/aitc/tests/unit/xpcshell.ini
+++ b/services/aitc/tests/unit/xpcshell.ini
@@ -1,6 +1,7 @@
 [DEFAULT]
-head = head_global.js
+head = ../../../common/tests/unit/head_global.js head_helpers.js
 tail =
 
-# Ensure we can import everything.
 [test_load_modules.js]
+[test_storage_queue.js]
+[test_storage_registry.js]
\ No newline at end of file
diff --git a/services/common/tests/unit/head_global.js b/services/common/tests/unit/head_global.js
--- a/services/common/tests/unit/head_global.js
+++ b/services/common/tests/unit/head_global.js
@@ -42,16 +42,16 @@ registrar.registerFactory(Components.ID(
                           "XULAppInfo", "@mozilla.org/xre/app-info;1",
                           XULAppInfoFactory);
 
 function addResourceAlias() {
   Cu.import("resource://gre/modules/Services.jsm");
   const handler = Services.io.getProtocolHandler("resource")
                   .QueryInterface(Ci.nsIResProtocolHandler);
 
-  let modules = ["common", "crypto"];
+  let modules = ["aitc", "common", "crypto"];
   for each (let module in modules) {
     let uri = Services.io.newURI("resource:///modules/services-" + module + "/",
                                  null, null);
     handler.setSubstitution("services-" + module, uri);
   }
 }
 addResourceAlias();
\ No newline at end of file
