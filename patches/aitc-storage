# HG changeset patch
# Parent 416a969f7d2fbdd9fae5524883a16f188fd32153
# User Anant Narayanan <anant@kix.in>
aitc-storage

diff --git a/services/aitc/modules/storage.js b/services/aitc/modules/storage.js
new file mode 100644
--- /dev/null
+++ b/services/aitc/modules/storage.js
@@ -0,0 +1,400 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const EXPORTED_SYMBOLS = ["AitcStorage", "AitcQueue"];
+
+const {classes: Cc, interfaces: Ci, utils: Cu, results: Cr} = Components;
+
+Cu.import("resource://gre/modules/NetUtil.jsm");
+Cu.import("resource://gre/modules/Webapps.jsm");
+Cu.import("resource://gre/modules/FileUtils.jsm");
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+
+Cu.import("resource://services-common/rest.js");
+Cu.import("resource://services-common/log4moz.js");
+Cu.import("resource://services-common/preferences.js");
+
+/**
+ * Provides a file-backed queue. Currently used by manager.js as persistent
+ * storage to manage pending installs and uninstalls.
+ *
+ * @param filename     
+ *        (String)    The file backing this queue will be named as this string.
+ *
+ * @param cb          
+ *        (Function)  This function will be called when the queue is ready to
+ *                    use. *DO NOT* call any methods on this object until the
+ *                    callback is invoked, if you do so, none of your operations
+ *                    will be persisted on disk.
+ *
+ */
+function AitcQueue(filename, cb) {
+  this._log = Log4Moz.repository.getLogger("Service.AITC.Storage.Queue");
+  this._log.level = Log4Moz.Level[Preferences.get(
+    "services.aitc.storage.log.level"
+  )];
+
+  this._queue = [];
+  this._writeLock = false;
+  this._file = FileUtils.getFile("ProfD", ["webapps", filename], true);
+
+  this._log.info("AitcQueue instance loading");
+
+  let self = this;
+  if (this._file.exists()) {
+    this._getFile(function _gotFile(data) {
+      if (data) {
+        self._queue = data;
+      }
+      self._log.info("AitcQueue instance created");
+      cb(true);
+    });
+  } else {
+    self._log.info("AitcQueue instance created");
+    cb(true);
+  }
+}
+AitcQueue.prototype = {
+  /**
+   * Add an object to the queue.
+   */
+  enqueue: function enqueue(obj, cb) {
+    this._log.info("Adding to queue " + obj);
+
+    if (!cb) {
+      throw new Error("enqueue called without callback");
+    }
+
+    let self = this;
+    this._queue.push(obj);
+
+    try {
+      this._putFile(this._queue, function _enqueuePutFile(err) {
+        if (!err) {
+          // Successful write.
+          cb(null, true);
+          return;
+        }
+        // Write unsuccessful, don't add to queue.
+        self._queue.pop();
+        cb(new Error(err), false);
+      });
+    } catch (e) {
+      self._queue.pop();
+      cb(e, false);
+    }    
+  },
+
+  /**
+   * Remove the object at the head of the queue.
+   */
+  dequeue: function dequeue(cb) {
+    this._log.info("Removing head of queue");
+
+    if (!cb) {
+      throw new Error("dequeue called without callback");
+    }
+    if (!this._queue.length) {
+      throw new Error("Queue is empty");
+    }
+
+    let self = this;
+    let obj = this._queue.shift();
+
+    try {
+      this._putFile(this._queue, function _dequeuePutFile(err) {
+        if (!err) {
+          // Successful write.
+          cb(null, true);
+          return;
+        }
+        // Unsuccessful write, put back in queue.
+        self._queue.unshift(obj);
+        cb(err, false);
+      });
+    } catch (e) {
+      self._queue.unshift(obj);
+      cb(e, false);
+    }
+  },
+
+  /**
+   * Return the object at the front of the queue without removing it.
+   */
+  peek: function peek() {
+    if (!this._queue.length) {
+      throw new Error("Queue is empty");
+    }
+    this._log.info("Peek returning head of queue");
+    return this._queue[0];
+  },
+
+  /**
+   * Find out the length of the queue.
+   */
+  length: function length(cb) {
+    return this._queue.length;
+  },
+
+  /**
+   * Get contents of cache file and parse it into an array. Will throw an
+   * exception if there is an error while reading the file.
+   */
+  _getFile: function _getFile(cb) {
+    let channel = NetUtil.newChannel(this._file);
+    channel.contentType = "application/json";
+
+    let self = this;
+    NetUtil.asyncFetch(channel, function _asyncFetched(stream, res) {
+      if (!Components.isSuccessCode(res)) {
+        self._log.error("Could not read from json file " + this._file.path);
+        cb(null);
+        return;
+      }
+
+      let data = [];
+      try {
+        data = JSON.parse(
+          NetUtil.readInputStreamToString(stream, stream.available())
+        );
+        stream.close();
+        cb(data);
+      } catch (e) {
+        self._log.error("Could not parse JSON " + e);
+        cb(null);
+      }
+    });
+  },
+
+  /**
+   * Put an array into the cache file. Will throw an exception if there is
+   * an error while trying to write to the file.
+   */
+  _putFile: function _putFile(value, cb) {
+    if (this._writeLock) {
+      throw new Error("_putFile already in progress");
+    }
+
+    this._writeLock = true;
+    try {
+      let ostream = FileUtils.openSafeFileOutputStream(this._file);
+
+      let converter = Cc["@mozilla.org/intl/scriptableunicodeconverter"].
+                      createInstance(Ci.nsIScriptableUnicodeConverter);
+      converter.charset = "UTF-8";
+      let istream = converter.convertToInputStream(JSON.stringify(value));
+
+      // Asynchronously copy the data to the file.
+      let self = this;
+      this._log.info("Writing queue to disk");
+      NetUtil.asyncCopy(istream, ostream, function _asyncCopied(result) {
+        self._writeLock = false;
+        if (Components.isSuccessCode(result)) {
+          self._log.info("asyncCopy succeeded");
+          cb(null);
+        } else {
+          let msg = "asyncCopy failed with " + result;
+          self._log.info(msg);
+          cb(msg);
+        }
+      });
+    } catch (e) {
+      this._writeLock = false;
+      cb(msg);
+    }
+  },
+};
+
+/**
+ * An interface to DOMApplicationRegistry, used by manager.js to process
+ * remote changes received and apply them to the local registry.
+ */
+function AitcStorageImpl() {
+  this._log = Log4Moz.repository.getLogger("Service.AITC.Storage");
+  this._log.level = Log4Moz.Level[Preferences.get(
+    "services.aitc.storage.log.level"
+  )];
+  this._log.info("Loading AitC storage module");
+}
+AitcStorageImpl.prototype = {
+  /**
+   * Determines what changes are to be made locally, given a list of
+   * remote apps.
+   *
+   * @param remoteApps
+   *        (Array)     An array of app records fetched from the AITC server.
+   *
+   * @param callback
+   *        (function)  A callback to be invoked when processing is finished.
+   */
+  processApps: function processApps(remoteApps, callback) {
+    let self = this;
+    this._log.info("Server check got " + remoteApps.length + " apps");
+
+    // Get the set of local apps, and then pass to _processApps.
+    // _processApps will check for the validity of remoteApps.
+    DOMApplicationRegistry.getAllWithoutManifests(
+      function _processAppsGotLocalApps(localApps) {
+        self._processApps(remoteApps, localApps, callback);
+      }
+    );
+  },
+
+  /**
+   * Take a list of remote and local apps and figured out what changes (if any)
+   * are to be made to the local DOMApplicationRegistry.
+   */
+  _processApps: function _processApps(remoteApps, lApps, callback) {
+    let toDelete = {};
+    let localApps = {};
+    
+    // Convert lApps to a dictionary of origin -> app (instead of id -> app).
+    for (let [id, app] in Iterator(lApps)) {
+      app.id = id;
+      toDelete[app.origin] = app;
+      localApps[app.origin] = app;
+    }
+
+    // Iterate over remote apps, and find out what changes we must apply.
+    let toInstall = [];
+    for each (let app in remoteApps) {
+      // Don't delete apps that are both local & remote.
+      let origin = app.origin;
+      if (!app.deleted) {
+        delete toDelete[origin];
+      }
+
+      // If there is a remote app that isn't local or 
+      // if the remote app was installed later.
+      let id = null;
+      if (!localApps[origin]) {
+        id = DOMApplicationRegistry.makeAppId();
+      }
+      if (localApps[origin] &&
+          (localApps[origin].installTime < app.installTime)) {
+        id = localApps[origin].id;
+      }
+      
+      // We should (re)install this app locally
+      if (id) {
+        toInstall.push({id: id, value: app});
+      }
+    }
+
+    // Uninstalls only need the ID & deleted flag.
+    let toUninstall = [];
+    for (let origin in toDelete) {
+      toUninstall.push({id: toDelete[origin].id, deleted: true});
+    }
+
+    // Apply installs & uninstalls.
+    this._applyUpdates(toInstall, toUninstall, callback);
+    return;
+  },
+
+  /**
+   * Applies a list of commands as determined by processApps locally.
+   */
+  _applyUpdates: function _applyUpdates(toInstall, toUninstall, callback) {
+    let finalCommands = [];
+
+    let self = this;
+    function onManifestsUpdated() {
+      if (toUninstall.length) {
+        finalCommands = finalCommands.concat(toUninstall);
+      }
+      if (finalCommands.length) {
+        self._log.info(
+          "processUpdates finished fetching manifests, calling updateApps"
+        );
+        DOMApplicationRegistry.updateApps(finalCommands, callback);
+      } else {
+        self._log.info(
+          "processUpdates finished fetching, no finalCommands were found"
+        );
+        callback();
+      }
+    }
+
+    // If no new manifests to fetch, proceed with update.
+    let done = 0;
+    let total = toInstall.length;
+    if (!total) {
+      onManifestsUpdated();
+      return;
+    }
+
+    // Update manifests for all the new remote apps we have.
+    for (let j = 0; j < total; j++) {
+      let app = toInstall[j];
+      let url = app.value.manifestURL;
+      if (url[0] == "/") {
+        url = app.value.origin + app.value.manifestURL;
+      }
+
+      this._log.info("Updating manifest " + url + "\n");
+      this._getManifest(url, function(err, manifest) {
+        if (!err) {
+          app.value.manifest = manifest;
+          finalCommands.push(app);
+          self._log.info(app.id + " was added to finalCommands");
+        } else {
+          self._log.debug("Couldn't fetch manifest at " + url + ": " + err);
+        }
+
+        // Not a big deal if we couldn't get a manifest, we will try to fetch
+        // it again in the next cycle. Carry on.
+        done += 1;
+        if (done == total) {
+          onManifestsUpdated();
+        }
+      });
+    }
+  },
+
+  /**
+   * Fetch a manifest from given URL. No retries are made on failure.
+   */
+  _getManifest: function _getManifest(url, callback)  {
+    let req = new RESTRequest(url);
+
+    let self = this;
+    req.get(function(error) {
+      if (error) {
+        callback(error, null);
+        return;
+      }
+      if (!req.response.success) {
+        callback(new Error("Non-200 while fetching manifest"), null);
+        return;
+      }
+
+      let err = null;
+      let manifest = null;
+      try {
+        manifest = JSON.parse(req.response.body);
+        if (!manifest.name) {
+          self._log.warn(
+            "_getManifest got invalid manifest: " + req.response.body
+          );
+          err = new Error("Invalid manifest fetched");
+        }
+      } catch (e) {
+        self._log.warn(
+          "_getManifest got invalid JSON response: " + req.response.body
+        );
+        err = new Error("Invalid manifest fetched");
+      }
+
+      callback(err, manifest);
+    });
+  },
+
+};
+
+XPCOMUtils.defineLazyGetter(this, "AitcStorage", function() {
+  return new AitcStorageImpl();
+});
\ No newline at end of file
diff --git a/services/aitc/services-aitc.js b/services/aitc/services-aitc.js
--- a/services/aitc/services-aitc.js
+++ b/services/aitc/services-aitc.js
@@ -1,1 +1,2 @@
 pref("services.aitc.client.log.level", "Debug");
+pref("services.aitc.storage.log.level", "Debug");
\ No newline at end of file
diff --git a/services/aitc/tests/unit/head_global.js b/services/aitc/tests/unit/head_global.js
--- a/services/aitc/tests/unit/head_global.js
+++ b/services/aitc/tests/unit/head_global.js
@@ -39,14 +39,16 @@ registrar.registerFactory(Components.ID(
                           "XULAppInfo", "@mozilla.org/xre/app-info;1",
                           XULAppInfoFactory);
 
 function addResourceAlias() {
   Cu.import("resource://gre/modules/Services.jsm");
   const handler = Services.io.getProtocolHandler("resource")
                   .QueryInterface(Ci.nsIResProtocolHandler);
 
-  
-  let uri = Services.io.newURI("resource:///modules/services-aitc/",
-                               null, null);
-  handler.setSubstitution("services-aitc", uri);
+  let modules = ["aitc", "common"];
+  for each (let module in modules) {
+    let uri = Services.io.newURI("resource:///modules/services-" + module + "/",
+                                 null, null);
+    handler.setSubstitution("services-" + module, uri);
+  }
 }
 addResourceAlias();
\ No newline at end of file
diff --git a/services/aitc/tests/unit/head_helpers.js b/services/aitc/tests/unit/head_helpers.js
new file mode 100644
--- /dev/null
+++ b/services/aitc/tests/unit/head_helpers.js
@@ -0,0 +1,37 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+function httpd_setup (handlers, port) {
+  let port   = port || 8080;
+  let server = new nsHttpServer();
+  for (let path in handlers) {
+    server.registerPathHandler(path, handlers[path]);
+  }
+  try {
+    server.start(port);
+  } catch (ex) {
+    _("==========================================");
+    _("Got exception starting HTTP server on port " + port);
+    _("Error: " + Utils.exceptionStr(ex));
+    _("Is there a process already listening on port " + port + "?");
+    _("==========================================");
+    do_throw(ex);
+  }
+
+  return server;
+}
+
+function httpd_handler(statusCode, status, body) {
+  return function handler(request, response) {
+    _("Processing request");
+    // Allow test functions to inspect the request.
+    request.body = readBytesFromInputStream(request.bodyInputStream);
+    handler.request = request;
+
+    response.setStatusLine(request.httpVersion, statusCode, status);
+    if (body) {
+      response.bodyOutputStream.write(body, body.length);
+    }
+  };
+}
\ No newline at end of file
diff --git a/services/aitc/tests/unit/test_load_modules.js b/services/aitc/tests/unit/test_load_modules.js
--- a/services/aitc/tests/unit/test_load_modules.js
+++ b/services/aitc/tests/unit/test_load_modules.js
@@ -1,9 +1,10 @@
 const modules = [
-  "client.js"
+  "client.js",
+  "storage.js"
 ];
 
 function run_test() {
   for each (let m in modules) {
     Cu.import("resource://services-aitc/" + m, {});
   }
 }
diff --git a/services/aitc/tests/unit/test_storage_queue.js b/services/aitc/tests/unit/test_storage_queue.js
new file mode 100644
--- /dev/null
+++ b/services/aitc/tests/unit/test_storage_queue.js
@@ -0,0 +1,128 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+Cu.import("resource://services-aitc/storage.js");
+Cu.import("resource://services-common/async.js");
+
+var queue = null;
+
+function run_test() {
+  queue = new AitcQueue("test", run_next_test);
+}
+
+add_test(function test_queue_create() {
+  do_check_eq(queue._queue.length, 0);
+  do_check_eq(queue._writeLock, false);
+
+  try {
+    queue.enqueue("foo");
+  } catch (e) {
+    do_check_eq(e.toString(), "Error: enqueue called without callback");
+  }
+
+  try {
+    queue.dequeue();
+  } catch (e) {
+    do_check_eq(e.toString(), "Error: dequeue called without callback");
+  }
+
+  run_next_test();
+});
+
+add_test(function test_queue_enqueue() {
+  // Add to queue
+  var testObj = {foo: "bar"};
+  queue.enqueue(testObj, function(err, done) {
+    do_check_eq(err, null);
+    do_check_eq(done, true);
+
+    // Check if peek value is correct
+    do_check_eq(queue.peek(), testObj);
+    // Peek should be idempotent
+    do_check_eq(queue.peek(), testObj);
+
+    run_next_test();
+  });
+});
+
+add_test(function test_queue_dequeue() {
+  // Remove an item and see if queue is empty
+  queue.dequeue(function(err, done) {
+    do_check_eq(err, null);
+    do_check_eq(done, true);
+    do_check_eq(queue.length(), 0);
+    try {
+      queue.peek();
+    } catch (e) {
+      do_check_eq(e.toString(), "Error: Queue is empty");
+      run_next_test();
+    }
+  });
+});
+
+add_test(function test_queue_multiaddremove() {
+  // Queues should handle objects, strings and numbers
+  let items = [{test:"object"}, "teststring", 42];
+
+  // Two random numbers: how many items to queue and how many to remove
+  let num = Math.floor(Math.random() * 100);
+  let rem = Math.floor(Math.random() * num);
+
+  // First insert all the items we will remove later
+  for (let i = 0; i < rem; i++) {
+    let ins = items[Math.round(Math.random() * 2)];
+    let cb = Async.makeSpinningCallback();
+    queue.enqueue(ins, cb);
+    do_check_eq(cb.wait(), true);
+  }
+
+  do_check_eq(queue.length(), rem);
+
+  // Now insert the items we won't remove
+  let check = [];
+  for (let i = 0; i < (num - rem); i++) {
+    check.push(items[Math.round(Math.random() * 2)]);
+    let cb = Async.makeSpinningCallback();
+    queue.enqueue(check[check.length - 1], cb);
+    do_check_eq(cb.wait(), true);
+  }
+
+  do_check_eq(queue.length(), num);
+
+  // Now dequeue rem items
+  for (let i = 0; i < rem; i++) {
+    let cb = Async.makeSpinningCallback();
+    queue.dequeue(cb);
+    do_check_eq(cb.wait(), true);
+  }
+
+  do_check_eq(queue.length(), num - rem);
+
+  // Check that the items left are the right ones
+  do_check_eq(JSON.stringify(queue._queue), JSON.stringify(check));
+
+  // Another instance of the same queue should return correct data
+  let queue2 = new AitcQueue("test", function(done) {
+    do_check_eq(done, true);
+    do_check_eq(queue2.length(), queue.length());
+    do_check_eq(JSON.stringify(queue._queue), JSON.stringify(queue2._queue));
+    run_next_test();
+  });
+});
+
+add_test(function test_queue_writelock() {
+  // Queue should not enqueue or dequeue if lock is enabled
+  queue._writeLock = true;
+  let len = queue.length();
+
+  queue.enqueue("writeLock test", function(err, done) {
+    do_check_eq(err.toString(), "Error: _putFile already in progress");
+    do_check_eq(queue.length(), len);
+
+    queue.dequeue(function(err, done) {
+      do_check_eq(err.toString(), "Error: _putFile already in progress");
+      do_check_eq(queue.length(), len);
+      run_next_test();
+    });
+  });
+});
\ No newline at end of file
diff --git a/services/aitc/tests/unit/test_storage_registry.js b/services/aitc/tests/unit/test_storage_registry.js
new file mode 100644
--- /dev/null
+++ b/services/aitc/tests/unit/test_storage_registry.js
@@ -0,0 +1,110 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+Cu.import("resource://gre/modules/Webapps.jsm");
+Cu.import("resource://services-aitc/storage.js");
+
+const SERVER = "http://localhost";
+
+var fakeApp1 = {
+  origin: SERVER + ":8081",
+  receipts: [],
+  manifestURL: "/manifest.webapp",
+  installOrigin: "http://localhost",
+  installedAt: Date.now(),
+  modifiedAt: Date.now()
+};
+
+// Valid manifest for app1
+var manifest1 = {
+  name: "Appasaurus",
+  description: "Best fake app ever",
+  launch_path: "/",
+  fullscreen: true,
+  required_features: ["webgl"]
+};
+
+var fakeApp2 = {
+  origin: SERVER + ":8082",
+  receipts: ["fake.jwt.token"],
+  manifestURL: "/manifest.webapp",
+  installOrigin: "http://localhost",
+  installedAt: Date.now(),
+  modifiedAt: Date.now()
+};
+
+// Invalid manifest for app2
+var manifest2_bad = {
+  not: "a manifest",
+  fullscreen: true
+};
+
+// Valid manifest for app2
+var manifest2_good = {
+  name: "Supercalifragilisticexpialidocious",
+  description: "Did we blow your mind yet?",
+  launch_path: "/"
+};
+
+function create_servers() {
+  // Serve manifests for test apps
+  let app1 = httpd_setup({"/manifest.webapp": function(req, res) {
+    let manifest = JSON.stringify(manifest1);
+    res.setStatusLine(req.httpVersion, 200, "OK");
+    res.setHeader("Content-Type", "application/x-web-app-manifest+json");
+    res.bodyOutputStream.write(manifest, manifest.length);
+  }}, 8081);
+
+  let app2_bad = httpd_setup({"/manifest.webapp": function(req, res) {
+    let manifest = JSON.stringify(manifest2_bad);
+    res.setStatusLine(req.httpVersion, 200, "OK");
+    res.setHeader("Content-Type", "application/x-web-app-manifest+json");
+    res.bodyOutputStream.write(manifest, manifest.length);
+  }}, 8082);
+
+  let app2_good = httpd_setup({"/manifest.webapp": function(req, res) {
+    let manifest = JSON.stringify(manifest2_good);
+    res.setStatusLine(req.httpVersion, 200, "OK");
+    res.setHeader("Content-Type", "application/x-web-app-manifest+json");
+    res.bodyOutputStream.write(manifest, manifest.length);
+  }}, 8083);
+}
+
+function run_test() {
+  run_next_test();
+}
+
+add_test(function test_storage_process() {
+  create_servers();
+
+  let apps = [fakeApp1, fakeApp2];
+  AitcStorage.processApps(apps, function() {
+    // Verify that app1 got added to registry
+    let id = DOMApplicationRegistry._appId(fakeApp1.origin);
+    do_check_eq(DOMApplicationRegistry.itemExists(id), true);
+
+    // app2 should be missing because of bad manifest
+    do_check_eq(DOMApplicationRegistry._appId(fakeApp2.origin), null);
+
+    // Now associate fakeApp2 with a good manifest and process again
+    fakeApp2.origin = SERVER + ":8083";
+    AitcStorage.processApps([fakeApp1, fakeApp2], function() {
+      // Both apps must be installed
+      let id1 = DOMApplicationRegistry._appId(fakeApp1.origin);
+      let id2 = DOMApplicationRegistry._appId(fakeApp2.origin);
+      do_check_eq(DOMApplicationRegistry.itemExists(id1), true);
+      do_check_eq(DOMApplicationRegistry.itemExists(id2), true);
+      run_next_test();
+    });
+  });
+});
+
+add_test(function test_storage_delete() {
+  // Set app1 as deleted
+  fakeApp1.deleted = true;
+  AitcStorage.processApps([fakeApp1, fakeApp2], function() {
+    // It should be missing
+    do_check_eq(DOMApplicationRegistry._appId(fakeApp1.origin), null);
+    run_next_test();
+  });
+});
\ No newline at end of file
diff --git a/services/aitc/tests/unit/xpcshell.ini b/services/aitc/tests/unit/xpcshell.ini
--- a/services/aitc/tests/unit/xpcshell.ini
+++ b/services/aitc/tests/unit/xpcshell.ini
@@ -1,6 +1,7 @@
 [DEFAULT]
-head = head_global.js
+head = head_global.js head_helpers.js
 tail =
 
-# Ensure we can import everything.
 [test_load_modules.js]
+[test_storage_queue.js]
+[test_storage_registry.js]
\ No newline at end of file
