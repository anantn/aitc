# HG changeset patch
# Parent 90ce2e565567f0f5ef2dd9218e606a49df979c1b

diff -r 90ce2e565567 services/aitc/tests/Makefile.in
--- a/services/aitc/tests/Makefile.in	Fri Jun 01 10:16:51 2012 -0700
+++ b/services/aitc/tests/Makefile.in	Fri Jun 01 14:49:52 2012 -0700
@@ -15,8 +15,13 @@
 
 include $(topsrcdir)/config/rules.mk
 
+# Number the test files because order is very important!
 _BROWSER_FILES = \
   head.js \
+  browser_id_1_fresh.js \
+  browser_id_2_login.js \
+  browser_id_3_default.js \
+  browser_id_4_emailas.js \
   browser_id_simple.js \
   file_browser_id_mock.html \
   $(NULL)
diff -r 90ce2e565567 services/aitc/tests/browser_id_1_fresh.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/services/aitc/tests/browser_id_1_fresh.js	Fri Jun 01 14:49:52 2012 -0700
@@ -0,0 +1,69 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * This test is the first in the series of the BrowserID module tests.
+ * We being by testing various combinations of invalid arguments, and then
+ * proceeding to check that we don't get an assertion even with valid
+ * arguments because nobody is signed in to BrowserID.
+ */
+function test() {
+  ok(BrowserID, "BrowserID exists");
+ 
+  try {
+    BrowserID.getAssertion();
+  } catch (e) {
+    is(
+      e.message,
+      "getAssertion called without a callback",
+      "No callback provided, caught correctly"
+    );
+  }
+
+  try {
+    BrowserID.getAssertion(function(){});
+  } catch(e) {
+    is(
+      e.message,
+      "getAssertion called without any options",
+      "No options provided, caught correctly"
+    );
+  }
+
+  try {
+    BrowserID.getAssertion(function(){}, {foo: "bar"});
+  } catch(e) {
+    is(
+      e.message,
+      "getAssertion called without an audience",
+      "No audience provided, caught correctly"
+    );
+  }
+
+  try {
+    BrowserID.getAssertion(
+      function(){},
+      {foo: "bar", audience: "rab", sameEmailAs: "baz", requiredEmail: "oof"}
+    );
+  } catch (e) {
+    is(
+      e.message,
+      "getAssertion sameEmailAs and requiredEmail are mutually exclusive",
+      "Cannot provide both sameEmailAs and requiredEmail, caught correctly"
+    );
+  }
+
+  // Now, test that we get no assertion because a user isn't logged in.
+  BrowserID.getAssertion(gotassertion, {audience: google});
+  waitForExplicitFinish();
+}
+
+function gotassertion(err, val) {
+  is(val, null, "No assertion received");
+  is(
+    err.toString(),
+    "Error: User is not logged in, or no emails were found",
+    "User is not logged in, no assertion received"
+  );
+  finish();
+}
\ No newline at end of file
diff -r 90ce2e565567 services/aitc/tests/browser_id_2_login.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/services/aitc/tests/browser_id_2_login.js	Fri Jun 01 14:49:52 2012 -0700
@@ -0,0 +1,52 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Ok, in test 1 the user was logged out. Now we'll use getAssertionWithLogin
+ * to force a popup to appear that we will then use to login to marketplace,
+ * as the test user. We also check if the assertion obtained as a result is
+ * valid.
+ */
+function test() {
+  loadURL(marketplace + "/en-US/login", function() {
+    BrowserID.getAssertionWithLogin(gotassertion, gBrowser.contentWindow);
+    // Wait a couple of seconds for the BrowserID popup to appear.
+    setTimeout(signin, 2000);
+  });
+  waitForExplicitFinish();
+}
+
+function signin() {
+  // BrowserID popup will be the front-most window, proceed to sign in as
+  // the test user.
+
+  // Enter email.
+  let browser = Services.wm.getMostRecentWindow("navigator:browser").gBrowser;
+  let doc = browser.contentDocument;
+  doc.getElementById("email").value = testEmail;
+  let submit = doc.getElementsByClassName("submit")[0];
+  let button = submit.getElementsByTagName("button")[0];
+  button.click();
+
+  // Wait a second for password field to appear.
+  setTimeout(function() {
+    // Enter password and login.
+    doc.getElementById("password").value = testPassword;
+    let submit = doc.getElementsByClassName("submit")[0];
+    let button = submit.getElementsByTagName("button")[0];
+    button.click();
+    // Now, gotassertion should be called.
+  }, 1000);
+}
+
+function gotassertion(err, val) {
+  // Check if we got a valid assertion
+  is(err, null, "No error for 2_login");
+
+  let assert = parseAssertion(val);
+  is(assert.issuer, "browserid.org", "Issuer for 2_login matches");
+  is(assert.email, testEmail, "Email for 2_login matches");
+  is(assert.audience, marketplace, "Audience for 2_login matches")
+
+  finish();
+}
\ No newline at end of file
diff -r 90ce2e565567 services/aitc/tests/browser_id_3_default.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/services/aitc/tests/browser_id_3_default.js	Fri Jun 01 14:49:52 2012 -0700
@@ -0,0 +1,26 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Now, we obtain an assertion for the test user silently, which should succeed
+ * since test 2_login signed us in already.
+ */
+function test() {
+  loadURL(google, function() {
+    BrowserID.getAssertion(
+      gotassertion,
+      {audience: google, requiredEmail: testEmail}
+    );
+  });
+  waitForExplicitFinish();
+}
+
+function gotassertion(err, val) {
+  // Check if assertion is valid.
+  is(err, null, "No error for 3_default");
+  let assert = parseAssertion(val);
+  is(assert.issuer, "browserid.org", "Issuer for 3_default matches");
+  is(assert.email, testEmail, "Email for 3_default matches");
+  is(assert.audience, google, "Audience for 3_default matches");
+  finish();
+}
\ No newline at end of file
diff -r 90ce2e565567 services/aitc/tests/browser_id_4_emailas.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/services/aitc/tests/browser_id_4_emailas.js	Fri Jun 01 14:49:52 2012 -0700
@@ -0,0 +1,27 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * We're already logged in to the marketplace, so let's see if we can 
+ * get an assertion for the dashboard with the same email address without
+ * knowing which email was used to sign in earlier. 
+ */
+function test() {
+  loadURL(dashboard, function() {
+    BrowserID.getAssertion(
+      gotassertion,
+      {audience: dashboard, sameEmailAs: marketplace}
+    );
+  });
+  waitForExplicitFinish();
+}
+
+function gotassertion(err, val) {
+  // Check if we got a valid assertion
+  is(err, null, "No error for 4_emailas");
+  let assert = parseAssertion(val);
+  is(assert.issuer, "browserid.org", "Issuer for 4_emailas matches");
+  is(assert.email, testEmail, "Email for 4_emailas matches");
+  is(assert.audience, dashboard, "Audience for 4_emailas matches");
+  finish();
+}
\ No newline at end of file
diff -r 90ce2e565567 services/aitc/tests/head.js
--- a/services/aitc/tests/head.js	Fri Jun 01 10:16:51 2012 -0700
+++ b/services/aitc/tests/head.js	Fri Jun 01 14:49:52 2012 -0700
@@ -8,6 +8,14 @@
 const BrowserID = tmp.BrowserID;
 const testPath = "http://mochi.test:8888/browser/services/aitc/tests/";
 
+const google = "http://www.google.com/";
+const dashboard = "https://myapps.mozillalabs.com/";
+const marketplace = "https://marketplace.mozilla.org";
+
+const testEmail = "moztest@mailinator.com";
+const testPassword = "mailinator";
+const signInPage = "https://browserid.org/signin";
+
 function loadURL(aURL, aCB) {
   gBrowser.selectedBrowser.addEventListener("load", function () {
     gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
@@ -20,4 +28,25 @@
 function setEndpoint(name) {
   let fullPath = testPath + "file_" + name + ".html";
   Services.prefs.setCharPref("services.aitc.browserid.url", fullPath);
+}
+
+function parseAssertion(assertion) {
+  let chain = assertion.split("~");
+  let len = chain.length;
+  if (len < 2) {
+    return {};
+  }
+
+  let cert = JSON.parse(atob(
+    chain[0].split(".")[1].replace("-", "+", "g").replace("_", "/", "g")
+  ));
+  let assert = JSON.parse(atob(
+    chain[len-1].split(".")[1].replace("-", "+", "g").replace("_", "/", "g")
+  ));
+
+  return {
+    issuer: cert.iss,
+    email: cert.principal.email,
+    audience: assert.aud
+  };
 }
\ No newline at end of file
diff -r 90ce2e565567 services/aitc/tests/unit/head_helpers.js
--- a/services/aitc/tests/unit/head_helpers.js	Fri Jun 01 10:16:51 2012 -0700
+++ b/services/aitc/tests/unit/head_helpers.js	Fri Jun 01 14:49:52 2012 -0700
@@ -7,7 +7,8 @@
 
 function httpd_setup (handlers, port) {
   let port   = port || 8080;
-  let server = new nsHttpServer();
+  // TODO renamed for bug 757860
+  let server = new HttpServer();
   for (let path in handlers) {
     server.registerPathHandler(path, handlers[path]);
   }
diff -r 90ce2e565567 services/aitc/tests/unit/test_mock_server.js
--- a/services/aitc/tests/unit/test_mock_server.js	Fri Jun 01 10:16:51 2012 -0700
+++ b/services/aitc/tests/unit/test_mock_server.js	Fri Jun 01 14:49:52 2012 -0700
@@ -3,9 +3,9 @@
 
 "use strict";
 
+Cu.import("resource://gre/modules/Webapps.jsm");
 Cu.import("resource://services-common/rest.js");
 Cu.import("resource://services-common/utils.js");
-Cu.import("resource://testing-common/services-common/aitcserver.js");
 Cu.import("resource://services-common/preferences.js");
 Cu.import("resource://services-aitc/client.js");
 
@@ -93,18 +93,18 @@
   const app = get_mock_app();
 
   let server = get_server_with_user(username);
-
   let client = get_client_for_server(username, server);
 
-  _("Installing " + JSON.stringify(app));
+  // TODO client.remoteInstall depends on DOMApplicationRegistry.getManifestFor,
+  // which is not test-friendly :(
+  let record = client._makeRemoteApp(app);
 
-  client.remoteInstall(app, function(error, status) {
+  client._putApp(record, function(error, status) {
     _("Got response");
     do_check_eq(error, null);
 
     do_check_true(status);
 
-
     client.getApps(function(error, apps) {
       _("Got response");
       do_check_eq(error, null);
@@ -135,7 +135,12 @@
 
   let client = get_client_for_server(username, server);
 
-  client.remoteUninstall(app, function(error, status) {
+  // TODO client.remoteUninstall depends on
+  // DOMApplicationRegistry.getManifestFor, which is not test-friendly :(
+  let record = client._makeRemoteApp(app);
+  record.deleted= true;
+
+  client._putApp(record, function(error, status) {
     _("Got response");
     do_check_eq(error, null);
 
diff -r 90ce2e565567 services/aitc/tests/unit/xpcshell.ini
--- a/services/aitc/tests/unit/xpcshell.ini	Fri Jun 01 10:16:51 2012 -0700
+++ b/services/aitc/tests/unit/xpcshell.ini	Fri Jun 01 14:49:52 2012 -0700
@@ -1,5 +1,5 @@
 [DEFAULT]
-head = ../../../common/tests/unit/head_global.js ../../../common/tests/unit/head_helpers.js head_helpers.js
+head = ../../../common/tests/unit/head_global.js ../../../common/tests/unit/head_helpers.js ../../../common/tests/unit/aitcserver.js head_helpers.js
 tail =
 
 [test_load_modules.js]
diff -r 90ce2e565567 services/common/tests/unit/aitcserver.js
--- a/services/common/tests/unit/aitcserver.js	Fri Jun 01 10:16:51 2012 -0700
+++ b/services/common/tests/unit/aitcserver.js	Fri Jun 01 14:49:52 2012 -0700
@@ -133,7 +133,7 @@
 function AITCServer10Server() {
   this._log = Log4Moz.repository.getLogger("Services.Common.AITCServer");
 
-  this.server = new nsHttpServer();
+  this.server = new HttpServer();
   this.port = null;
   this.users = {};
   this.autoCreateUsers = false;
