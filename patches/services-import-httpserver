# HG changeset patch
# Parent 7e0dc89ffa6403060bfe64a895b75df7f1024cf6
# User Gregory Szorc <gps@mozilla.com>
Bug 757860 - Load JS HTTP server as a module; r=rnewman

diff -r 7e0dc89ffa64 netwerk/test/httpserver/httpd.js
--- a/netwerk/test/httpserver/httpd.js	Fri Jun 01 09:32:11 2012 -0700
+++ b/netwerk/test/httpserver/httpd.js	Fri Jun 01 09:37:00 2012 -0700
@@ -790,7 +790,7 @@
     // Bug 508125: Add a GC here else we'll use gigabytes of memory running
     // mochitests. We can't rely on xpcshell doing an automated GC, as that
     // would interfere with testing GC stuff...
-    Components.utils.gc();
+    Components.utils.forceGC();
   },
 
   /**
diff -r 7e0dc89ffa64 services/common/tests/unit/head_global.js
--- a/services/common/tests/unit/head_global.js	Fri Jun 01 09:32:11 2012 -0700
+++ b/services/common/tests/unit/head_global.js	Fri Jun 01 09:37:00 2012 -0700
@@ -1,14 +1,11 @@
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
+const {classes: Cc, interfaces: Ci, results: Cr, utils: Cu, manager: Cm} = Components;
+
 // Where to bind test HTTP servers to.
 const TEST_SERVER_URL = "http://localhost:8080/";
 
-// This has the side-effect of populating Cc, Ci, Cu, Cr. It's best not to
-// ask questions and just accept it.
-do_load_httpd_js();
-const Cm = Components.manager;
-
 let gSyncProfile = do_get_profile();
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
@@ -54,4 +51,4 @@
     handler.setSubstitution("services-" + module, uri);
   }
 }
-addResourceAlias();
\ No newline at end of file
+addResourceAlias();
diff -r 7e0dc89ffa64 services/common/tests/unit/head_helpers.js
--- a/services/common/tests/unit/head_helpers.js	Fri Jun 01 09:32:11 2012 -0700
+++ b/services/common/tests/unit/head_helpers.js	Fri Jun 01 09:37:00 2012 -0700
@@ -2,6 +2,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+Cu.import("resource://testing-common/httpd.js");
 Cu.import("resource://services-common/log4moz.js");
 Cu.import("resource://services-common/utils.js");
 
@@ -93,7 +94,7 @@
 
 function httpd_setup (handlers, port) {
   let port   = port || 8080;
-  let server = new nsHttpServer();
+  let server = new HttpServer();
   for (let path in handlers) {
     server.registerPathHandler(path, handlers[path]);
   }
diff -r 7e0dc89ffa64 services/common/tests/unit/test_restrequest.js
--- a/services/common/tests/unit/test_restrequest.js	Fri Jun 01 09:32:11 2012 -0700
+++ b/services/common/tests/unit/test_restrequest.js	Fri Jun 01 09:37:00 2012 -0700
@@ -586,7 +586,7 @@
  * channel activity until the request is automatically canceled.
  */
 add_test(function test_timeout() {
-  let server = new nsHttpServer();
+  let server = new HttpServer();
   let server_connection;
   server._handler.handleResponse = function(connection) {
     // This is a handler that doesn't do anything, just keeps the connection
@@ -603,7 +603,9 @@
     do_check_eq(error.result, Cr.NS_ERROR_NET_TIMEOUT);
     do_check_eq(this.status, this.ABORTED);
 
+    _("Closing connection.");
     server_connection.close();
+    _("Shutting down server.");
     server.stop(run_next_test);
   });
 });
diff -r 7e0dc89ffa64 services/sync/tests/unit/head_http_server.js
--- a/services/sync/tests/unit/head_http_server.js	Fri Jun 01 09:32:11 2012 -0700
+++ b/services/sync/tests/unit/head_http_server.js	Fri Jun 01 09:37:00 2012 -0700
@@ -527,7 +527,7 @@
  */
 function SyncServer(callback) {
   this.callback = callback || {__proto__: SyncServerCallback};
-  this.server   = new nsHttpServer();
+  this.server   = new HttpServer();
   this.started  = false;
   this.users    = {};
   this._log     = Log4Moz.repository.getLogger(SYNC_HTTP_LOGGER);
@@ -539,7 +539,7 @@
 }
 SyncServer.prototype = {
   port:   8080,
-  server: null,    // nsHttpServer.
+  server: null,    // HttpServer.
   users:  null,    // Map of username => {collections, password}.
 
   /**
@@ -775,8 +775,8 @@
   },
 
   /**
-   * This is invoked by the nsHttpServer. `this` is bound to the SyncServer;
-   * `handler` is the nsHttpServer's handler.
+   * This is invoked by the HttpServer. `this` is bound to the SyncServer;
+   * `handler` is the HttpServer's handler.
    *
    * TODO: need to use the correct Sync API response codes and errors here.
    * TODO: Basic Auth.
diff -r 7e0dc89ffa64 services/sync/tests/unit/test_addons_engine.js
--- a/services/sync/tests/unit/test_addons_engine.js	Fri Jun 01 09:32:11 2012 -0700
+++ b/services/sync/tests/unit/test_addons_engine.js	Fri Jun 01 09:37:00 2012 -0700
@@ -170,7 +170,7 @@
   server.createContents(USER, contents);
   server.start();
 
-  let amoServer = new nsHttpServer();
+  let amoServer = new HttpServer();
   amoServer.registerFile("/search/guid:addon1%40tests.mozilla.org",
                          do_get_file("addon1-search.xml"));
 
diff -r 7e0dc89ffa64 services/sync/tests/unit/test_addons_store.js
--- a/services/sync/tests/unit/test_addons_store.js	Fri Jun 01 09:32:11 2012 -0700
+++ b/services/sync/tests/unit/test_addons_store.js	Fri Jun 01 09:37:00 2012 -0700
@@ -42,7 +42,7 @@
 
 function createAndStartHTTPServer(port) {
   try {
-    let server = new nsHttpServer();
+    let server = new HttpServer();
 
     let bootstrap1XPI = ExtensionsTestPath("/addons/test_bootstrap1_1.xpi");
 
