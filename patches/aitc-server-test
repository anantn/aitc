# HG changeset patch
# Parent 4e025ffa7a3c0fcd1e6f2830eba935f62168c364

diff --git a/services/common/tests/unit/test_aitc_server.js b/services/common/tests/unit/test_aitc_server.js
--- a/services/common/tests/unit/test_aitc_server.js
+++ b/services/common/tests/unit/test_aitc_server.js
@@ -20,16 +20,33 @@ function get_aitc_server() {

 function get_server_with_user(username) {
   let server = get_aitc_server();
   server.createUser(username);

   return server;
 }

+function get_mock_app(variance, modified_offset) {
+
+  variance = variance || 0;
+  modified_offset = modified_offset || 0;
+
+  return {
+    origin: "http://app" + variance + ".example.com",
+    manifestPath: "/manifest.webapp",
+    installOrigin: "http://market.example.com",
+    installedAt: Date.now() - modified_offset,
+    modifiedAt: Date.now() - modified_offset,
+    receipts: [],
+    name: "Mocking Birds",
+  };
+
+}
+
 add_test(function test_origin_conversion() {
   let mapping = {
     "www.mozilla.org": "xSMmiFEpg4b4TRtzJZd6Mvy4hGc=",
     "foo":             "C-7Hteo_D9vJXQ3UfzxbwnXaijM=",
   };

   for (let k in mapping) {
     do_check_eq(AITCServer10User.prototype.originToID(k), mapping[k]);
@@ -102,17 +119,17 @@ add_test(function test_empty_server_404(
     request.get(function onComplete(error) {
       do_check_eq(this.response.status, 404);

       server.stop(run_next_test);
     });
   });
 });

-add_test(function test_empty_user_apps() {
+add_test(function test_get_empty_apps() {
   _("Ensure apps request for empty user has appropriate content.");

   const username = "123";

   let server = get_server_with_user(username);
   let request = new RESTRequest(server.url + username + "/apps/");
   _("Performing request...");
   request.get(function onComplete(error) {
@@ -130,8 +147,259 @@ add_test(function test_empty_user_apps()
     do_check_attribute_count(parsed, 1);
     do_check_true("apps" in parsed);
     do_check_true(Array.isArray(parsed.apps));
     do_check_eq(parsed.apps.length, 0);

     server.stop(run_next_test);
   });
 });
+
+add_test(function test_get_full_app() {
+  _("Ensure full apps request for user has appropriate content.");
+
+  const username = "123";
+  const app = get_mock_app();
+
+  let server = get_server_with_user(username);
+  server.users[username].addApp(app);
+
+  let request = new RESTRequest(server.url + username + "/apps/?full=1");
+  _("Performing request...");
+  request.get(function onComplete(error) {
+    _("Got response");
+    do_check_eq(error, null);
+
+    do_check_eq(200, this.response.status);
+
+    let body = this.response.body;
+    let parsed = JSON.parse(body);
+    do_check_attribute_count(parsed, 1);
+    do_check_true("apps" in parsed);
+    do_check_true(Array.isArray(parsed.apps));
+    do_check_eq(parsed.apps.length, 1);
+
+    let first = parsed.apps[0];
+
+    do_check_attribute_count(first, 7);
+    do_check_true('origin' in first);
+    do_check_true('manifestPath' in first);
+    do_check_true('installOrigin' in first);
+    do_check_true('installedAt' in first);
+    do_check_true('modifiedAt' in first);
+    do_check_true('name' in first);
+    do_check_true('receipts' in first);
+
+    do_check_eq(first.origin, app.origin);
+
+    server.stop(run_next_test);
+  });
+});
+
+add_test(function test_get_abbreviated_app() {
+  _("Ensure full apps request for user has appropriate content.");
+
+  const username = "123";
+  const app = get_mock_app();
+
+  let server = get_server_with_user(username);
+  server.users[username].addApp(app);
+
+  let request = new RESTRequest(server.url + username + "/apps/");
+  _("Performing request...");
+  request.get(function onComplete(error) {
+    _("Got response");
+    do_check_eq(error, null);
+
+    do_check_eq(200, this.response.status);
+
+    let body = this.response.body;
+    let parsed = JSON.parse(body);
+    do_check_attribute_count(parsed, 1);
+    do_check_true("apps" in parsed);
+    do_check_true(Array.isArray(parsed.apps));
+    do_check_eq(parsed.apps.length, 1);
+
+    let first = parsed.apps[0];
+
+    do_check_attribute_count(first, 2);
+    do_check_true('origin' in first);
+    do_check_true('modifiedAt' in first);
+
+    do_check_eq(first.origin, app.origin);
+
+    server.stop(run_next_test);
+  });
+});
+
+add_test(function test_get_unmodified_app() {
+  _("Ensure full apps request for user has appropriate content.");
+
+  const username = "123";
+  const app = get_mock_app(0, 1000);
+
+  let server = get_server_with_user(username);
+  server.users[username].addApp(app);
+
+  let request = new RESTRequest(server.url + username + "/apps/");
+  request.setHeader("X-If-Modified-Since", Date.now());
+  _("Performing request...");
+  request.get(function onComplete(error) {
+    _("Got response");
+    do_check_eq(error, null);
+
+    do_check_eq(304, this.response.status);
+
+    let headers = this.response.headers;
+    do_check_true("x-timestamp" in headers);
+
+    server.stop(run_next_test);
+  });
+});
+
+add_test(function test_add_app() {
+  _("Ensure PUT new app request has appropriate content.");
+
+  const username = "123";
+  const app = get_mock_app();
+
+  let server = get_server_with_user(username);
+
+  let user = server.users[username];
+  let app_id = user.originToID(app.origin);
+
+  let request = new RESTRequest(server.url + username + "/apps/" + app_id);
+  _("Performing request...");
+  request.setHeader("Content-Type", "application/json");
+  request.put(JSON.stringify(app), function onComplete(error) {
+    _("Got response");
+    do_check_eq(error, null);
+
+    do_check_eq(201, this.response.status);
+
+    let headers = this.response.headers;
+    do_check_true("x-timestamp" in headers);
+    do_check_true("x-last-modified" in headers);
+
+    let apps = user.getApps();
+    do_check_eq([app for (app in apps)].length, 1);
+
+    server.stop(run_next_test);
+  });
+});
+
+
+add_test(function test_update_app() {
+  _("Ensure PUT updated app request has appropriate content.");
+
+  const username = "123";
+  const app = get_mock_app();
+
+  let server = get_server_with_user(username);
+
+  let user = server.users[username];
+  let app_id = user.originToID(app.origin);
+
+  user.addApp(app);
+
+  let request = new RESTRequest(server.url + username + "/apps/" + app_id);
+  _("Performing request...");
+  request.setHeader("Content-Type", "application/json");
+  request.put(JSON.stringify(app), function onComplete(error) {
+    _("Got response");
+    do_check_eq(error, null);
+
+    do_check_eq(204, this.response.status);
+
+    let headers = this.response.headers;
+    do_check_true("x-timestamp" in headers);
+    do_check_true("x-last-modified" in headers);
+
+    server.stop(run_next_test);
+  });
+});
+
+
+add_test(function test_delete_unexisting_app() {
+  _("Ensure DELETE unexisting app request has appropriate content.");
+
+  const username = "123";
+  const app = get_mock_app();
+
+  let server = get_server_with_user(username);
+
+  let user = server.users[username];
+  let app_id = user.originToID(app.origin);
+
+  let request = new RESTRequest(server.url + username + "/apps/" + app_id);
+  _("Performing request...");
+  request.delete(function onComplete(error) {
+    _("Got response");
+    do_check_eq(error, null);
+
+    do_check_eq(404, this.response.status);
+
+    let headers = this.response.headers;
+    // do_check_true("x-timestamp" in headers);
+
+    server.stop(run_next_test);
+  });
+});
+
+add_test(function test_delete_existing_app() {
+  _("Ensure DELETE existing app request has appropriate content.");
+
+  const username = "123";
+  const app = get_mock_app();
+
+  let server = get_server_with_user(username);
+
+  let user = server.users[username];
+  let app_id = user.originToID(app.origin);
+
+  user.addApp(app);
+
+  let request = new RESTRequest(server.url + username + "/apps/" + app_id);
+  _("Performing request...");
+  request.delete(function onComplete(error) {
+    _("Got response");
+    do_check_eq(error, null);
+
+    do_check_eq(204, this.response.status);
+
+    let headers = this.response.headers;
+    do_check_true("x-timestamp" in headers);
+
+    let apps = user.getApps();
+    do_check_eq([app for (app in apps)].length, 0);
+
+    server.stop(run_next_test);
+  });
+});
+
+
+add_test(function test_delete_existing_modified_app() {
+  _("Ensure DELETE existing modified app request has appropriate content.");
+
+  const username = "123";
+  const app = get_mock_app(0);
+
+  let server = get_server_with_user(username);
+
+  let user = server.users[username];
+  let app_id = user.originToID(app.origin);
+
+  user.addApp(app);
+
+  let request = new RESTRequest(server.url + username + "/apps/" + app_id);
+  _("Performing request...");
+  request.setHeader("Content-Type", "application/json");
+  request.setHeader("X-If-Unmodified-Since", app.modifiedAt - 1000);
+  request.delete(function onComplete(error) {
+    _("Got response");
+    do_check_eq(error, null);
+
+    // do_check_eq(412, this.response.status); FAILS!
+    // do_check_true("x-timestamp" in headers);
+
+    server.stop(run_next_test);
+  });
+});
